.typedef @i8 = int<8>
.typedef @i16 = int<16>
.typedef @i32 = int<32>
.typedef @i64 = int<64>
.typedef @float = float
.typedef @double = double

.typedef @void = void

.funcsig @noparamsnoret = @void ()

.typedef @funcdumb = func<@noparamsnoret>

.typedef @thread = thread
.typedef @stack = stack
.typedef @tagref64 = tagref64

.const @TRUE <@i64> = 1
.const @FALSE <@i64> = 0

.funcsig @i_ii = @i64 (@i64 @i64)

.typedef @refvoid = ref<@void>
.typedef @irefvoid = iref<@void>
.typedef @weakrefvoid = weakref<@void>
.const @NULLREF <@refvoid> = NULL

.typedef @StructFoo = struct <@i32 @i64 @float @double>

.const @STRUCT_FOO <@StructFoo> = {1 2 3.0f 4.0d}

.typedef @refi64 = ref<@i64>
.typedef @irefi64 = iref<@i64>
.typedef @weakrefi64 = weakref<@i64>

.typedef @StructBar = struct <
    @i64 @i32 @i16 @i8 @float @double
    @refi64 @irefi64 @weakrefi64
>

.typedef @refBar = ref<@StructBar>
.typedef @irefBar = iref<@StructBar>

.typedef @hCharArray = hybrid<@i64 @i8>

.typedef @ArrayBaz = array <@i16 1024>
.const @THREE <@i64> = 3

.typedef @JavaLikeByteArray = hybrid <@i32 @i8>

.const @I64_1024 <@i64> = 1024

.global @g_i8   <@i8>
.global @g_i16  <@i16>
.global @g_i32  <@i32>
.global @g_i64  <@i64>
.global @g_f    <@float>
.global @g_d    <@double>
.global @g_r    <@refvoid>
.global @g_ir   <@irefvoid>
.global @g_wr   <@weakrefvoid>
    
.global @g_func <@funcdumb>
    
.global @g_thr  <@thread>
.global @g_sta  <@stack>
.global @g_tr64 <@tagref64>

.const @I64_30000 <@i64> = 30000

.const @CRAZY_ALLOC_COUNT <@i64> = 100

.global @g_refi64 <@refi64>

.funcdef @keepglobal <@noparamsnoret> () {
    CALL <@noparamsnoret> @storeglobal ()
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()

%next:
    %obj2 = LOAD <@refi64> @g_refi64
    %obj2iref = GETIREF <@i64> %obj2
    %obj2val = LOAD <@i64> %obj2iref
    
    %checktrap = TRAP <@void> %exit %exit KEEPALIVE (%obj2 %obj2val)
    
%exit:
    STORE <@refi64> @g_refi64 NULL
    ICALL @uvm.thread_exit()
    THROW @NULLREF
}

.funcdef @storeglobal <@noparamsnoret> () {
    %obj = NEW <@i64>
    STORE <@refi64> @g_refi64 %obj
    %iref = GETIREF <@i64> %obj
    STORE <@i64> %iref 42
    RETVOID
}

.funcdef @nokeepalloca <@noparamsnoret> () {
    CALL <@noparamsnoret> @allocatest ()
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()

%next:
    ICALL @uvm.thread_exit()
    THROW @NULLREF
}

.funcdef @allocatest <@noparamsnoret> () {
    %alloca = ALLOCA <@refi64>
    
    CALL <@allocasettersig> @allocasetter (%alloca)
    
    %gctrap = TRAP <@void> %next %next KEEPALIVE ()
    
%next:
    RETVOID
}

.funcsig @allocasettersig = @void (@irefi64)

.funcdef @allocasetter <@allocasettersig> (%ir) {
    %obj = NEW <@i64>
    %iref = GETIREF <@i64> %obj
    STORE <@i64> %iref 42

    STORE <@refi64> %ir %obj
    
    RETVOID
}

.funcdef @crazy_allocator <@noparamsnoret> () {
%entry:
    BRANCH %head
    
%head:
    %togo = PHI <@i64> { %entry: @CRAZY_ALLOC_COUNT; %body: %togo2; }
    %nz = NE <@i64> %togo 0
    BRANCH2 %nz %body %exit

%body:
    NEWHYBRID <@hCharArray> @I64_30000
    %togo2 = SUB <@i64> %togo 1
    BRANCH %head

%exit:
    RETVOID
}