// Generated from uIR.g4 by ANTLR 4.2
package parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class uIRLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__37=1, T__36=2, T__35=3, T__34=4, T__33=5, T__32=6, T__31=7, T__30=8, 
		T__29=9, T__28=10, T__27=11, T__26=12, T__25=13, T__24=14, T__23=15, T__22=16, 
		T__21=17, T__20=18, T__19=19, T__18=20, T__17=21, T__16=22, T__15=23, 
		T__14=24, T__13=25, T__12=26, T__11=27, T__10=28, T__9=29, T__8=30, T__7=31, 
		T__6=32, T__5=33, T__4=34, T__3=35, T__2=36, T__1=37, T__0=38, DIGITS=39, 
		IDENTIFIER=40, GLOBAL_ID_PREFIX=41, LOCAL_ID_PREFIX=42, WS=43, LINE_COMMENT=44;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'-'", "'ref'", "':'", "'('", "'<'", "'int'", "'array'", "'RET2'", "'EQ'", 
		"'void'", "'double'", "'{'", "'ALLOCA'", "'LOAD'", "'SLT'", "'SGT'", "'PARAM'", 
		"'}'", "'float'", "'struct'", "'STORE'", "'BRANCH'", "'SREM'", "')'", 
		"'.'", "'+'", "'='", "'ADD'", "'e'", "'.label'", "'.typedef'", "'SHL'", 
		"'>'", "'.const'", "'BRANCH2'", "'iref'", "'PHI'", "'.funcdef'", "DIGITS", 
		"IDENTIFIER", "'@'", "'%'", "WS", "LINE_COMMENT"
	};
	public static final String[] ruleNames = {
		"T__37", "T__36", "T__35", "T__34", "T__33", "T__32", "T__31", "T__30", 
		"T__29", "T__28", "T__27", "T__26", "T__25", "T__24", "T__23", "T__22", 
		"T__21", "T__20", "T__19", "T__18", "T__17", "T__16", "T__15", "T__14", 
		"T__13", "T__12", "T__11", "T__10", "T__9", "T__8", "T__7", "T__6", "T__5", 
		"T__4", "T__3", "T__2", "T__1", "T__0", "DIGITS", "DIGIT", "IDENTIFIER", 
		"GLOBAL_ID_PREFIX", "LOCAL_ID_PREFIX", "IDCHAR", "WS", "LINE_COMMENT"
	};


	public uIRLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "uIR.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2.\u0139\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6"+
		"\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3"+
		"\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3"+
		"\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3"+
		"\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\35\3\35\3"+
		"\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3"+
		" \3!\3!\3!\3!\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3%"+
		"\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\6(\u010d"+
		"\n(\r(\16(\u010e\3)\3)\3*\3*\6*\u0115\n*\r*\16*\u0116\3*\3*\6*\u011b\n"+
		"*\r*\16*\u011c\5*\u011f\n*\3+\3+\3,\3,\3-\5-\u0126\n-\3.\6.\u0129\n.\r"+
		".\16.\u012a\3.\3.\3/\3/\3/\3/\7/\u0133\n/\f/\16/\u0136\13/\3/\3/\2\2\60"+
		"\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20"+
		"\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37"+
		"= ?!A\"C#E$G%I&K\'M(O)Q\2S*U+W,Y\2[-].\3\2\6\3\2\62;\7\2/\60\62;C\\aa"+
		"c|\5\2\13\f\17\17\"\"\4\2\f\f\17\17\u013c\2\3\3\2\2\2\2\5\3\2\2\2\2\7"+
		"\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2"+
		"\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2"+
		"\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2"+
		"\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2"+
		"\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2"+
		"\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M"+
		"\3\2\2\2\2O\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2[\3\2\2\2\2]\3\2"+
		"\2\2\3_\3\2\2\2\5a\3\2\2\2\7e\3\2\2\2\tg\3\2\2\2\13i\3\2\2\2\rk\3\2\2"+
		"\2\17o\3\2\2\2\21u\3\2\2\2\23z\3\2\2\2\25}\3\2\2\2\27\u0082\3\2\2\2\31"+
		"\u0089\3\2\2\2\33\u008b\3\2\2\2\35\u0092\3\2\2\2\37\u0097\3\2\2\2!\u009b"+
		"\3\2\2\2#\u009f\3\2\2\2%\u00a5\3\2\2\2\'\u00a7\3\2\2\2)\u00ad\3\2\2\2"+
		"+\u00b4\3\2\2\2-\u00ba\3\2\2\2/\u00c1\3\2\2\2\61\u00c6\3\2\2\2\63\u00c8"+
		"\3\2\2\2\65\u00ca\3\2\2\2\67\u00cc\3\2\2\29\u00ce\3\2\2\2;\u00d2\3\2\2"+
		"\2=\u00d4\3\2\2\2?\u00db\3\2\2\2A\u00e4\3\2\2\2C\u00e8\3\2\2\2E\u00ea"+
		"\3\2\2\2G\u00f1\3\2\2\2I\u00f9\3\2\2\2K\u00fe\3\2\2\2M\u0102\3\2\2\2O"+
		"\u010c\3\2\2\2Q\u0110\3\2\2\2S\u011e\3\2\2\2U\u0120\3\2\2\2W\u0122\3\2"+
		"\2\2Y\u0125\3\2\2\2[\u0128\3\2\2\2]\u012e\3\2\2\2_`\7/\2\2`\4\3\2\2\2"+
		"ab\7t\2\2bc\7g\2\2cd\7h\2\2d\6\3\2\2\2ef\7<\2\2f\b\3\2\2\2gh\7*\2\2h\n"+
		"\3\2\2\2ij\7>\2\2j\f\3\2\2\2kl\7k\2\2lm\7p\2\2mn\7v\2\2n\16\3\2\2\2op"+
		"\7c\2\2pq\7t\2\2qr\7t\2\2rs\7c\2\2st\7{\2\2t\20\3\2\2\2uv\7T\2\2vw\7G"+
		"\2\2wx\7V\2\2xy\7\64\2\2y\22\3\2\2\2z{\7G\2\2{|\7S\2\2|\24\3\2\2\2}~\7"+
		"x\2\2~\177\7q\2\2\177\u0080\7k\2\2\u0080\u0081\7f\2\2\u0081\26\3\2\2\2"+
		"\u0082\u0083\7f\2\2\u0083\u0084\7q\2\2\u0084\u0085\7w\2\2\u0085\u0086"+
		"\7d\2\2\u0086\u0087\7n\2\2\u0087\u0088\7g\2\2\u0088\30\3\2\2\2\u0089\u008a"+
		"\7}\2\2\u008a\32\3\2\2\2\u008b\u008c\7C\2\2\u008c\u008d\7N\2\2\u008d\u008e"+
		"\7N\2\2\u008e\u008f\7Q\2\2\u008f\u0090\7E\2\2\u0090\u0091\7C\2\2\u0091"+
		"\34\3\2\2\2\u0092\u0093\7N\2\2\u0093\u0094\7Q\2\2\u0094\u0095\7C\2\2\u0095"+
		"\u0096\7F\2\2\u0096\36\3\2\2\2\u0097\u0098\7U\2\2\u0098\u0099\7N\2\2\u0099"+
		"\u009a\7V\2\2\u009a \3\2\2\2\u009b\u009c\7U\2\2\u009c\u009d\7I\2\2\u009d"+
		"\u009e\7V\2\2\u009e\"\3\2\2\2\u009f\u00a0\7R\2\2\u00a0\u00a1\7C\2\2\u00a1"+
		"\u00a2\7T\2\2\u00a2\u00a3\7C\2\2\u00a3\u00a4\7O\2\2\u00a4$\3\2\2\2\u00a5"+
		"\u00a6\7\177\2\2\u00a6&\3\2\2\2\u00a7\u00a8\7h\2\2\u00a8\u00a9\7n\2\2"+
		"\u00a9\u00aa\7q\2\2\u00aa\u00ab\7c\2\2\u00ab\u00ac\7v\2\2\u00ac(\3\2\2"+
		"\2\u00ad\u00ae\7u\2\2\u00ae\u00af\7v\2\2\u00af\u00b0\7t\2\2\u00b0\u00b1"+
		"\7w\2\2\u00b1\u00b2\7e\2\2\u00b2\u00b3\7v\2\2\u00b3*\3\2\2\2\u00b4\u00b5"+
		"\7U\2\2\u00b5\u00b6\7V\2\2\u00b6\u00b7\7Q\2\2\u00b7\u00b8\7T\2\2\u00b8"+
		"\u00b9\7G\2\2\u00b9,\3\2\2\2\u00ba\u00bb\7D\2\2\u00bb\u00bc\7T\2\2\u00bc"+
		"\u00bd\7C\2\2\u00bd\u00be\7P\2\2\u00be\u00bf\7E\2\2\u00bf\u00c0\7J\2\2"+
		"\u00c0.\3\2\2\2\u00c1\u00c2\7U\2\2\u00c2\u00c3\7T\2\2\u00c3\u00c4\7G\2"+
		"\2\u00c4\u00c5\7O\2\2\u00c5\60\3\2\2\2\u00c6\u00c7\7+\2\2\u00c7\62\3\2"+
		"\2\2\u00c8\u00c9\7\60\2\2\u00c9\64\3\2\2\2\u00ca\u00cb\7-\2\2\u00cb\66"+
		"\3\2\2\2\u00cc\u00cd\7?\2\2\u00cd8\3\2\2\2\u00ce\u00cf\7C\2\2\u00cf\u00d0"+
		"\7F\2\2\u00d0\u00d1\7F\2\2\u00d1:\3\2\2\2\u00d2\u00d3\7g\2\2\u00d3<\3"+
		"\2\2\2\u00d4\u00d5\7\60\2\2\u00d5\u00d6\7n\2\2\u00d6\u00d7\7c\2\2\u00d7"+
		"\u00d8\7d\2\2\u00d8\u00d9\7g\2\2\u00d9\u00da\7n\2\2\u00da>\3\2\2\2\u00db"+
		"\u00dc\7\60\2\2\u00dc\u00dd\7v\2\2\u00dd\u00de\7{\2\2\u00de\u00df\7r\2"+
		"\2\u00df\u00e0\7g\2\2\u00e0\u00e1\7f\2\2\u00e1\u00e2\7g\2\2\u00e2\u00e3"+
		"\7h\2\2\u00e3@\3\2\2\2\u00e4\u00e5\7U\2\2\u00e5\u00e6\7J\2\2\u00e6\u00e7"+
		"\7N\2\2\u00e7B\3\2\2\2\u00e8\u00e9\7@\2\2\u00e9D\3\2\2\2\u00ea\u00eb\7"+
		"\60\2\2\u00eb\u00ec\7e\2\2\u00ec\u00ed\7q\2\2\u00ed\u00ee\7p\2\2\u00ee"+
		"\u00ef\7u\2\2\u00ef\u00f0\7v\2\2\u00f0F\3\2\2\2\u00f1\u00f2\7D\2\2\u00f2"+
		"\u00f3\7T\2\2\u00f3\u00f4\7C\2\2\u00f4\u00f5\7P\2\2\u00f5\u00f6\7E\2\2"+
		"\u00f6\u00f7\7J\2\2\u00f7\u00f8\7\64\2\2\u00f8H\3\2\2\2\u00f9\u00fa\7"+
		"k\2\2\u00fa\u00fb\7t\2\2\u00fb\u00fc\7g\2\2\u00fc\u00fd\7h\2\2\u00fdJ"+
		"\3\2\2\2\u00fe\u00ff\7R\2\2\u00ff\u0100\7J\2\2\u0100\u0101\7K\2\2\u0101"+
		"L\3\2\2\2\u0102\u0103\7\60\2\2\u0103\u0104\7h\2\2\u0104\u0105\7w\2\2\u0105"+
		"\u0106\7p\2\2\u0106\u0107\7e\2\2\u0107\u0108\7f\2\2\u0108\u0109\7g\2\2"+
		"\u0109\u010a\7h\2\2\u010aN\3\2\2\2\u010b\u010d\5Q)\2\u010c\u010b\3\2\2"+
		"\2\u010d\u010e\3\2\2\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010fP"+
		"\3\2\2\2\u0110\u0111\t\2\2\2\u0111R\3\2\2\2\u0112\u0114\5U+\2\u0113\u0115"+
		"\5Y-\2\u0114\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0114\3\2\2\2\u0116"+
		"\u0117\3\2\2\2\u0117\u011f\3\2\2\2\u0118\u011a\5W,\2\u0119\u011b\5Y-\2"+
		"\u011a\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d"+
		"\3\2\2\2\u011d\u011f\3\2\2\2\u011e\u0112\3\2\2\2\u011e\u0118\3\2\2\2\u011f"+
		"T\3\2\2\2\u0120\u0121\7B\2\2\u0121V\3\2\2\2\u0122\u0123\7\'\2\2\u0123"+
		"X\3\2\2\2\u0124\u0126\t\3\2\2\u0125\u0124\3\2\2\2\u0126Z\3\2\2\2\u0127"+
		"\u0129\t\4\2\2\u0128\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u0128\3\2"+
		"\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\b.\2\2\u012d"+
		"\\\3\2\2\2\u012e\u012f\7\61\2\2\u012f\u0130\7\61\2\2\u0130\u0134\3\2\2"+
		"\2\u0131\u0133\n\5\2\2\u0132\u0131\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132"+
		"\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0137\3\2\2\2\u0136\u0134\3\2\2\2\u0137"+
		"\u0138\b/\2\2\u0138^\3\2\2\2\n\2\u010e\u0116\u011c\u011e\u0125\u012a\u0134"+
		"\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}